{% set name = "mongoengine" %}
{% set version = "0.15.0" %}
{% set file_ext = "tar.gz" %}
{% set hash_type = "sha256" %}
{% set hash_value = "f8fed3871dfcefd421d3a3be1b43b3b9a1622db6a4271d78f15f494e51003f75" %}

package:
  name: '{{ name|lower }}'
  version: '{{ version }}'

source:
  fn: '{{ name }}-{{ version }}.{{ file_ext }}'
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.{{ file_ext }}
  '{{ hash_type }}': '{{ hash_value }}'

build:
  number: 0
  script: python setup.py install --single-version-externally-managed --record=record.txt
  preserve_egg_dir: True

requirements:
  host:
    - python
    - setuptools
    - pymongo >=2.7.1
    - six
  run:
    - python
    - pymongo >=2.7.1
    - six

test:
  imports:
    - mongoengine
    - mongoengine.base
    - mongoengine.queryset
  requires:
    - blinker
    - coverage ==4.2
    - nose
    - pillow >=2.0.0
    - python-dateutil

about:
  home: http://mongoengine.org/
  license: MIT License
  license_family: MIT
  license_file: ''
  summary: MongoEngine is a Python Object-Document Mapper for working with MongoDB.
  description: "===========\nMongoEngine\n===========\n:Info: MongoEngine is an ORM-like layer on top of PyMongo.\n:Repository: https://github.com/MongoEngine/mongoengine\n:Author: Harry Marr (http://github.com/hmarr)\n\
    :Maintainer: Stefan W\xF3jcik (http://github.com/wojcikstefan)\n\n.. image:: https://travis-ci.org/MongoEngine/mongoengine.svg?branch=master\n  :target: https://travis-ci.org/MongoEngine/mongoengine\n\
    \n.. image:: https://coveralls.io/repos/github/MongoEngine/mongoengine/badge.svg?branch=master\n  :target: https://coveralls.io/github/MongoEngine/mongoengine?branch=master\n\n.. image:: https://landscape.io/github/MongoEngine/mongoengine/master/landscape.svg?style=flat\n\
    \  :target: https://landscape.io/github/MongoEngine/mongoengine/master\n  :alt: Code Health\n\nAbout\n=====\nMongoEngine is a Python Object-Document Mapper for working with MongoDB.\nDocumentation is\
    \ available at https://mongoengine-odm.readthedocs.io - there\nis currently a `tutorial <https://mongoengine-odm.readthedocs.io/tutorial.html>`_,\na `user guide <https://mongoengine-odm.readthedocs.io/guide/index.html>`_,\
    \ and\nan `API reference <https://mongoengine-odm.readthedocs.io/apireference.html>`_.\n\nSupported MongoDB Versions\n==========================\nMongoEngine is currently tested against MongoDB v2.4,\
    \ v2.6, and v3.0. Future\nversions should be supported as well, but aren't actively tested at the moment.\nMake sure to open an issue or submit a pull request if you experience any\nproblems with MongoDB\
    \ v3.2+.\n\nInstallation\n============\nWe recommend the use of `virtualenv <https://virtualenv.pypa.io/>`_ and of\n`pip <https://pip.pypa.io/>`_. You can then use ``pip install -U mongoengine``.\n\
    You may also have `setuptools <http://peak.telecommunity.com/DevCenter/setuptools>`_\nand thus you can use ``easy_install -U mongoengine``. Otherwise, you can download the\nsource from `GitHub <http://github.com/MongoEngine/mongoengine>`_\
    \ and run ``python\nsetup.py install``.\n\nDependencies\n============\nAll of the dependencies can easily be installed via `pip <https://pip.pypa.io/>`_.\nAt the very least, you'll need these two packages\
    \ to use MongoEngine:\n\n- pymongo>=2.7.1\n- six>=1.10.0\n\nIf you utilize a ``DateTimeField``, you might also use a more flexible date parser:\n\n- dateutil>=2.1.0\n\nIf you need to use an ``ImageField``\
    \ or ``ImageGridFsProxy``:\n\n- Pillow>=2.0.0\n\nExamples\n========\nSome simple examples of what MongoEngine code looks like:\n\n.. code :: python\n\n    from mongoengine import *\n    connect('mydb')\n\
    \n    class BlogPost(Document):\n        title = StringField(required=True, max_length=200)\n        posted = DateTimeField(default=datetime.datetime.utcnow)\n        tags = ListField(StringField(max_length=50))\n\
    \        meta = {'allow_inheritance': True}\n\n    class TextPost(BlogPost):\n        content = StringField(required=True)\n\n    class LinkPost(BlogPost):\n        url = StringField(required=True)\n\
    \n    # Create a text-based post\n    >>> post1 = TextPost(title='Using MongoEngine', content='See the tutorial')\n    >>> post1.tags = ['mongodb', 'mongoengine']\n    >>> post1.save()\n\n    # Create\
    \ a link-based post\n    >>> post2 = LinkPost(title='MongoEngine Docs', url='hmarr.com/mongoengine')\n    >>> post2.tags = ['mongoengine', 'documentation']\n    >>> post2.save()\n\n    # Iterate over\
    \ all posts using the BlogPost superclass\n    >>> for post in BlogPost.objects:\n    ...     print '===', post.title, '==='\n    ...     if isinstance(post, TextPost):\n    ...         print post.content\n\
    \    ...     elif isinstance(post, LinkPost):\n    ...         print 'Link:', post.url\n    ...     print\n    ...\n\n    # Count all blog posts and its subtypes\n    >>> BlogPost.objects.count()\n\
    \    2\n    >>> TextPost.objects.count()\n    1\n    >>> LinkPost.objects.count()\n    1\n\n    # Count tagged posts\n    >>> BlogPost.objects(tags='mongoengine').count()\n    2\n    >>> BlogPost.objects(tags='mongodb').count()\n\
    \    1\n\nTests\n=====\nTo run the test suite, ensure you are running a local instance of MongoDB on\nthe standard port and have ``nose`` installed. Then, run ``python setup.py nosetests``.\n\nTo run\
    \ the test suite on every supported Python and PyMongo version, you can\nuse ``tox``. You'll need to make sure you have each supported Python version\ninstalled in your environment and then:\n\n.. code-block::\
    \ shell\n\n    # Install tox\n    $ pip install tox\n    # Run the test suites\n    $ tox\n\nIf you wish to run a subset of tests, use the nosetests convention:\n\n.. code-block:: shell\n\n    # Run\
    \ all the tests in a particular test file\n    $ python setup.py nosetests --tests tests/fields/fields.py\n    # Run only particular test class in that file\n    $ python setup.py nosetests --tests\
    \ tests/fields/fields.py:FieldTest\n    # Use the -s option if you want to print some debug statements or use pdb\n    $ python setup.py nosetests --tests tests/fields/fields.py:FieldTest -s\n\nCommunity\n\
    =========\n- `MongoEngine Users mailing list\n  <http://groups.google.com/group/mongoengine-users>`_\n- `MongoEngine Developers mailing list\n  <http://groups.google.com/group/mongoengine-dev>`_\n\n\
    Contributing\n============\nWe welcome contributions! See the `Contribution guidelines <https://github.com/MongoEngine/mongoengine/blob/master/CONTRIBUTING.rst>`_\n\n\n"
  doc_url: ''
  dev_url: ''

extra:
  recipe-maintainers: doob-project
